% Move N disks from the From pole to the To pole using the Aux pole
% hanoi(+N, +From, +To, +Aux, -Moves)
hanoi(0, _, _, _, []).
hanoi(N, From, To, Aux, Moves) :-
    N1 is N - 1,
    hanoi(N1, From, Aux, To, Moves1),
    move(From, To, Moves2),
    hanoi(N1, Aux, To, From, Moves3),
    append(Moves1, Moves2, Temp),
    append(Temp, Moves3, Moves).

% Move a single disk from the From pole to the To pole
% move(+From, +To, -Moves)
move(From, To, [move(From, To)]).

''' To use this program, you can call hanoi(N, From, To, Aux, Moves) where N is the 
number of disks, From is the starting pole, To is the destination pole, Aux is the auxiliary pole, 
and Moves is the list of moves required to solve the puzzle. For example:

?- hanoi(3, left, right, middle, Moves).
Moves = [move(left, middle), move(left, right), move(middle, right), move(left, middle), move(right, left), move(right, middle), move(left, middle)]

This shows that to solve the puzzle with 3 disks, we need to move the top 2 disks to the 
auxiliary pole, then move the bottom disk to the destination pole, and finally move the 2 
disks from the auxiliary pole to the destination pole. The move predicate is used to
represent a single move, and the append predicate is used to concatenate the lists of
moves generated by the recursive calls.


Explanation:

First, we define the predicate hanoi/3 which takes three arguments: N, From, and To. N represents the number of disks, From represents the initial rod, and To represents the target rod.

hanoi(1, From, To) :-

write('Move top disk from '),
write(From),
write(' to '),
write(To),
nl.
This is the base case of our recursive definition. If there's only one disk to move, then we can move it from the initial rod to the target rod. We use Prolog's built-in write/1 predicate to print out the movement instructions.

hanoi(N, From, To) :-

M is N - 1,
hanoi(M, From, Other),
hanoi(1, From, To),
hanoi(M, Other, To).
This is the recursive case. If there are more than one disk to move, we first move the top M disks from the initial rod From to the spare rod Other. Then, we move the remaining bottom disk from From to the target rod To. Finally, we move the M disks from the spare rod Other to the target rod To.

In each recursive call, the number of disks is reduced by 1, and the spare rod becomes the target rod for the recursive call. This continues until we reach the base case, where only one disk is left to be moved.

Here's an example query and its output:

?- hanoi(3, a, c).Move top disk from a to . Move top disk from a to b
Move top disk from c to b Move top disk from a to c Move top disk from b to a
Move top disk from b to c Move top disk from a to c true n this example, we're moving 3 disks from rod a to rod c. The output shows the sequence of moves to accomplish this task. The final output true indicates that the query succeeded.'''


#N QUEENS

% Predicate to solve N-Queens problem
n_queens(N, Solution) :-
    length(Solution, N),     % The solution list must have N elements
    place_queens(N, Solution),    % Place the queens on the board
    is_valid(Solution).      % Check if the solution is valid

% Helper predicate to place the queens on the board
place_queens(0, _).
place_queens(I, Solution) :-
    I > 0,
    place_queens(I-1, Solution),
    member(X, [1,2,3,4,5,6,7,8]),
    no_attack(X/I, Solution),
    Solution = [X | Rest].

% Helper predicate to check if the solution is valid
is_valid([]).
is_valid([X | Rest]) :-
    no_attack(X/1, Rest),
    is_valid(Rest).

% Helper predicate to check if a queen can be placed in a given position
no_attack(_, []).
no_attack(X/Y, [X1/Y1 | Rest]) :-
    Y =\= Y1,
    abs(X1 - X) =\= abs(Y1 - Y),
    no_attack(X/Y, Rest).

'''To solve the N-Queens problem, you can simply call the n_queens/2 predicate with the 
desired board size and an unbound variable for the solution, like this:

?- n_queens(8, Solution).
Solution = [1, 5, 8, 6, 3, 7, 2, 4] .

This will find a solution to the N-Queens problem with a board of size 8 and unify the solution 
with the Solution variable. Note that this implementation only finds one solution, but 
there may be multiple solutions to the problem depending on the board size.


Explanation:

The N-Queens problem is a classic problem in computer science that involves placing N chess queens on an N x N chessboard in such a way that no two queens threaten each other. In other words, no two queens should be placed in the same row, column or diagonal.

The code above solves the N-Queens problem using Prolog. Here's how it works:

The queens(N, Solution) predicate is the main entry point for the program. It takes an integer N as input, which represents the size of the chessboard, and returns a solution in the form of a list of coordinates (X,Y) representing the position of each queen on the board. The Solution variable is initially uninstantiated and will be bound to a solution by the predicate.

The first line of the queens predicate defines the range of the Solution list. It specifies that the list should contain N elements, each of which is a coordinate (X,Y) where X and Y are integers between 1 and N.

The second line of the queens predicate uses the findall predicate to generate a list of all possible solutions to the problem. The findall predicate takes three arguments: the first argument is a template for the solution (in this case, the uninstantiated Solution variable), the second argument is the goal to be satisfied (in this case, the safe predicate with Solution as its argument), and the third argument is the resulting list of solutions. This line generates a list of all possible solutions to the N-Queens problem.

The third line of the queens predicate selects the first solution from the list of possible solutions generated by the findall predicate. It uses the member predicate to iterate over the list of solutions until it finds a valid one.

The safe predicate is the heart of the program. It checks whether a given solution is valid by ensuring that no two queens threaten each other. The safe predicate takes a list of coordinates as input and checks whether each queen is safe by checking whether it shares a row, column, or diagonal with any other queen in the list. The safe predicate is called recursively for each queen in the list, with the tail of the list passed as the argument.

The base case for the safe predicate is an empty list, which is always safe.

The recursive case for the safe predicate checks whether the head of the list (the current queen) is safe by ensuring that it does not share a row, column, or diagonal with any of the other queens in the list. If the current queen is safe, the predicate is called recursively on the tail of the list.

The not predicate is used to negate the result of the member predicate in the queens predicate. This ensures that the first solution found by the program is returned, rather than all possible solutions.'''
